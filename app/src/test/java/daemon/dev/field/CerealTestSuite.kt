//package daemon.dev.field////import daemon.dev.field.cereal.objects.*//import daemon.dev.field.nypt.Key//import daemon.dev.field.cereal.Cerealizer//import org.junit.Assert//import org.junit.Test////class CerealTestSuite {////    private val cereal = Cerealizer()//    val user = UserProfile("alias",Key(8))////    @Test//    fun comment() {//        val comment:String = "comment"//        val time_created:Long = 0//        val num:Int = 0////        var obj = Comment(user,comment,time_created,num)////        val string = cereal.commentToString(obj)//        println(string)//        obj = cereal.commentFromString(string)!!////        Assert.assertEquals(user, obj.user)//        Assert.assertEquals(comment, obj.comment)//        Assert.assertEquals(time_created, obj.time_created)//        Assert.assertEquals(num, obj.num)////    }////    @Test//    fun meshRaw() {//        val type : Int = 0//        val nodeInfo : NodeInfo = NodeInfo(user,true,true,listOf(),listOf())//        val requests : List<ULong> = listOf()//        val newData : HashMap<ULong,String> = hashMapOf()//        val posts : List<Post> = listOf()//        val extraData : ByteArray = byteArrayOf()////        var obj = MeshRaw(type,nodeInfo,requests,newData,posts,extraData)////        val string = cereal.rawToString(obj)//        println(string)//        val bytes = cereal.packetToByte(obj)//        obj = cereal.getPacket(bytes)!!////        Assert.assertEquals(type, obj.type)//        Assert.assertEquals(nodeInfo, obj.nodeInfo)//        Assert.assertEquals(requests, obj.requests)//        Assert.assertEquals(newData, obj.newData)//        Assert.assertEquals(posts, obj.posts)//        Assert.assertArrayEquals(extraData, obj.extraData)////    }////    @Test//    fun message() {//         val title = "title"//         val body = "body"//         val time_created: Long = 0//         var last_touched: Long = 0//         val uid: ULong = 0u////        var obj = Message(title,body,time_created,last_touched,uid,user)////        val string = cereal.postToString(obj)//        println(string)//        obj = (cereal.postFromString(string) as Message?)!!////        Assert.assertEquals(title, obj.title)//        Assert.assertEquals(body, obj.body)//        Assert.assertEquals(time_created, obj.time_created)//        Assert.assertEquals(last_touched, obj.last_touched)//        Assert.assertEquals(uid, obj.uid)//        Assert.assertEquals(user, obj.user)////    }////    @Test//    fun nodeInfo() {//        val forwarding = true//        val accepting = true//        val connections: List<ULong> = listOf()//        val public_channels : List<String> = listOf()////        var obj = NodeInfo(user,forwarding,accepting,null,null)////        val string = cereal.infoToString(obj)//        println(string)//        obj = cereal.infoFromString(string)!!////        Assert.assertEquals(user, obj.user)//        Assert.assertEquals(forwarding, obj.forwarding)//        Assert.assertEquals(accepting, obj.accepting)//        Assert.assertEquals(connections, obj.connections)//        Assert.assertEquals(public_channels, obj.public_channels)//////    }////    @Test//    fun remoteHost() {//        val socketAddress = null//        val uid = Key(2)////        var obj = RemoteHost(socketAddress,uid)////        val string = cereal.hostToByte(obj)//        println(string.toString())//        obj = cereal.getHost(string)////        Assert.assertEquals(socketAddress, obj.socketAddress)//        Assert.assertEquals(uid, obj.uid)////    }////    @Test//    fun userProfile() {//        var alias : String = "alias"//        val uid = Key(2)////        var obj = UserProfile(alias,uid)////        val string = cereal.profileToString(obj)//        println(string)//        obj = cereal.profileFromString(string)!!////        Assert.assertEquals(alias, obj.alias)//        Assert.assertEquals(uid, obj.uid)//////    }////    @Test//    fun wrapper() {//        val type : Int = 0//        val mid : Int = 0//        val cur : Int = 0//        val max : Int = 0//        val bytes : ByteArray = byteArrayOf()////        var obj = Wrapper(type,mid,cur,max,bytes)////        val string = cereal.wrapperToBytes(obj)//        obj = cereal.bytesToWrapper(string)!!////        Assert.assertEquals(type, obj.type)//        Assert.assertEquals(mid, obj.mid)//        Assert.assertEquals(cur, obj.cur)//        Assert.assertEquals(max, obj.max)//        Assert.assertArrayEquals(bytes, obj.bytes)////    }//////    @Test//    fun packet(){////        val forwarding = true//        val accepting = true//        val connections: List<ULong> = listOf()//        val public_channels : List<String> = listOf()////        var obj : Any = NodeInfo(user,forwarding,accepting,connections,public_channels)////        val type0 : Int = MeshRaw.INFO//        val nodeInfo : NodeInfo = obj as NodeInfo//        val requests = null//        val newData = null//        val posts = null//        val extraData = null////        obj = MeshRaw(type0,nodeInfo,requests,newData,posts,extraData)////        val type : Int = 0//        val mid : Int = 0//        val cur : Int = 0//        val max : Int = 0//        val bytes : ByteArray = cereal.packetToByte(obj)////        obj = Wrapper(type,mid,cur,max,bytes)////        val string = cereal.wrapperToBytes(obj)//        obj = cereal.bytesToWrapper(string)!!////        println(bytes.toString(CHARSET))//        println(obj.bytes.toString(CHARSET))////        //Wrapper//        Assert.assertEquals(type, obj.type)//        Assert.assertEquals(mid, obj.mid)//        Assert.assertEquals(cur, obj.cur)//        Assert.assertEquals(max, obj.max)//        Assert.assertArrayEquals(bytes, obj.bytes)////        obj = cereal.getPacket(obj.bytes)!!////        //MeshRaw//        Assert.assertEquals(type0, obj.type)//        Assert.assertEquals(nodeInfo, obj.nodeInfo)//        Assert.assertEquals(requests, obj.requests)//        Assert.assertEquals(newData, obj.newData)//        Assert.assertEquals(posts, obj.posts)//        Assert.assertArrayEquals(extraData, obj.extraData)////        obj = obj.nodeInfo!!////        //NodeInfo//        Assert.assertEquals(user, obj.user)//        Assert.assertEquals(forwarding, obj.forwarding)//        Assert.assertEquals(accepting, obj.accepting)//        Assert.assertEquals(connections, obj.connections)//        Assert.assertEquals(public_channels, obj.public_channels)////    }////}